// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/Authentication.sol";

contract AuthenticationTest is Test {
    Authentication public authentication;

    function setUp() public {
        // deploy verifier contract
        authentication = new Authentication(bytes("1121645852825515626345503741442177404306361956507933536148868635850297893661"));
    }

    function testVerification() public {
        // proof generated using groth16 library
        uint[2] memory a = [2286148188795294223782218550230681924862103558184234660022688078888022731632, 12057053656942806801568493292801324018446156627571209761574600752585040229132];
        uint[2][2] memory b = [
            [9293367528707794416431124476064281961217115521772067562737703359842546282917, 11091865035702851833982944689584728244113341325843600671782707470374424999019], 
            [11195776216851587432046086180192147523068145505794637270975606272095720749797, 11662189428429086838968850379777233353616966837797174339313286314805794929865]
        ];
        uint[2] memory c = [13537006320785380760703557350113989363676231519484024181454920717335366112322, 9897840614637280930942032113600639710863346679884665882912528575607768763254];
        uint[3] memory input = [
            7482957314897491958720310111063229293691091167953360800893076207160025912429, 
            1121645852825515626345503741442177404306361956507933536148868635850297893661, 
            1073780885644033714745404669674009187443215374154
        ];
        bool result = authentication.authenticate(a, b, c, input);
        assertTrue(result);
    }

    function testDoubleVerification() public {
        // TODO: check that nullier prevents double verification
    }
}
